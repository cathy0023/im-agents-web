---
description: 定义适用于IM Agents Web的 Steering 方向盘模板，包括产品业务规范和 React + TypeScript 技术规范
globs: ["**/*.md"]
alwaysApply: false
---
# Steering 方向盘模板 - IM Agents Web

## 概述

Steering（方向盘）是 SDC 的团队规范沉淀能力，专为 IM Agents Web 定制，用 Markdown 文档定义 AI 智能助手业务规范和 React + TypeScript + shadcn UI 技术规范，让 AI 按照项目最佳实践开发。通过明确的规范文档，确保团队开发的一致性和质量。

## 文档结构

### 1. product.md（产品规范）

```markdown
# IM Agents Web 产品规范

## 产品愿景
构建一个现代化的AI智能助手Web应用，为用户提供多场景、多角色的AI对话服务，通过流式交互和智能化体验，让AI助手成为用户工作和学习的得力伙伴。

## 业务目标
- **多Agent支持**：提供不同专业领域的AI助手，满足用户多样化需求
- **流式体验**：实时流式输出，提供接近人类对话的自然体验
- **个性化定制**：支持主题切换、偏好设置，打造个性化使用体验
- **数据安全**：本地存储用户数据，保护隐私安全
- **跨平台兼容**：响应式设计，支持桌面端和移动端访问

## 用户画像

### 主要用户群体
1. **知识工作者**
   - 特征：需要高效获取信息和知识，提升工作效率
   - 需求：快速问答、文档协助、决策支持
   - 使用场景：工作中遇到问题、需要创意灵感、学习新知识

2. **学生和研究人员**
   - 特征：学习能力强，对新技术接受度高
   - 需求：学习辅导、研究支持、概念解释
   - 使用场景：课业辅导、论文写作、概念理解

3. **内容创作者**
   - 特征：需要创意支持和内容生成帮助
   - 需求：内容策划、文案优化、创意启发
   - 使用场景：文章写作、营销文案、创意策划

4. **技术开发者**
   - 特征：追求效率和技术前沿，注重用户体验
   - 需求：技术问题解答、代码协助、架构咨询
   - 使用场景：编程问题、技术选型、代码优化

5. **HR和管理人员**
   - 特征：关注团队管理和人员发展
   - 需求：政策咨询、管理建议、人员培训
   - 使用场景：制度制定、团队管理、员工辅导

## 核心功能模块

### 模块 1：多Agent智能对话
- **功能描述**：支持多个AI助手角色，提供专业领域的智能对话服务
- **业务价值**：满足用户不同场景的专业需求，提升对话质量
- **优先级**：高

### 模块 2：流式交互体验
- **功能描述**：实时流式输出AI回复，支持中断和重新生成
- **业务价值**：提供自然流畅的对话体验，减少等待时间
- **优先级**：高

### 模块 3：个性化主题系统
- **功能描述**：支持浅色/暗黑主题切换，用户偏好本地存储
- **业务价值**：提供个性化使用体验，适应不同用户习惯
- **优先级**：高

### 模块 4：对话历史管理
- **功能描述**：按Agent分类管理对话历史，支持搜索和导出
- **业务价值**：方便用户回顾历史对话，提升使用效率
- **优先级**：中

### 模块 5：API密钥管理
- **功能描述**：安全存储和管理用户的AI服务API密钥
- **业务价值**：保护用户隐私，简化使用流程
- **优先级**：中

### 模块 6：响应式界面设计
- **功能描述**：适配桌面端和移动端，提供一致的用户体验
- **业务价值**：扩大用户覆盖面，提升可访问性
- **优先级**：中

## 产品原则
1. **隐私优先**：用户数据本地存储，不上传到第三方服务器
2. **体验至上**：流畅的交互体验，直观的界面设计
3. **开放兼容**：支持多种AI服务，不绑定特定供应商
4. **安全可靠**：代码开源透明，用户可自主部署
5. **持续优化**：根据用户反馈持续改进功能和体验

## 成功指标
- **用户体验**：页面加载时间 < 1秒，AI响应首字节 < 2秒
- **功能完整性**：多Agent切换正常率 > 99%，流式输出稳定性 > 95%
- **用户满意度**：用户满意度 > 4.5/5.0，功能完成度 > 90%
- **技术指标**：主题切换无闪烁，TypeScript编译零错误
- **兼容性指标**：现代浏览器兼容性 > 95%，移动端适配完美
```

### 2. tech.md（技术规范）

```markdown
# IM Agents Web 技术规范

## 技术栈

### 前端技术栈
- **框架**：React 19.1.1
- **构建工具**：Vite 7.1.7
- **语言**：TypeScript 5.8.3
- **UI 组件库**：shadcn UI（基于 Radix UI）
- **图标**：Lucide React 0.544.0

### 状态和数据管理
- **状态管理**：zustand 5.0.8
- **数据获取**：Axios 1.12.2
- **数据持久化**：zustand/middleware/persist
- **类型安全**：TypeScript 严格模式

### API 和服务集成
- **API 协议**：RESTful API / Server-Sent Events
- **认证方式**：Bearer Token
- **AI 服务**：智谱AI GLM系列模型
- **流式处理**：Fetch API + ReadableStream

### 构建和开发工具
- **构建工具**：Vite (支持 HMR、代码分割)
- **包管理器**：npm
- **代码检查**：ESLint 9.36.0 + TypeScript ESLint
- **类型检查**：TypeScript 编译器
- **路由**：React Router Dom 7.9.1

### 样式和UI
- **样式框架**：Tailwind CSS 4.1.11
- **组件库**：shadcn UI (语义化颜色系统)
- **主题系统**：CSS变量 + dark模式
- **响应式设计**：Tailwind 响应式工具类
- **动画效果**：tailwindcss-animate

## 强制库版本

### 核心依赖
```json
{
  "dependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.1",
    "zustand": "^5.0.8",
    "axios": "^1.12.2",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "lucide-react": "^0.544.0",
    "js-cookie": "^3.0.5"
  }
}
```

### 开发依赖
```json
{
  "devDependencies": {
    "@vitejs/plugin-react": "^5.0.3",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@types/js-cookie": "^3.0.6",
    "@types/node": "^24.5.2",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.44.0",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "@eslint/js": "^9.36.0",
    "globals": "^16.4.0",
    "vite": "^7.1.7",
    "tailwindcss": "^4.1.11",
    "@tailwindcss/vite": "^4.1.11",
    "shadcn": "^3.3.1"
  }
}
```

## 开发环境要求
- **Node.js**：14.x+ (推荐 16.x LTS)
- **包管理器**：npm 6+ / yarn 1.22+
- **浏览器兼容**：Chrome 70+, Firefox 65+, Safari 12+, Edge 79+
- **开发工具**：Vue DevTools, VS Code + Vetur插件
- **后端API**：需要配套的后端API服务

## 代码质量标准
- **JavaScript ES6+**：使用现代JavaScript语法
- **测试覆盖率**：> 80% (组件测试 + 单元测试)
- **ESLint 规则**：Vue 推荐 + Element UI规则
- **性能基准**：首屏加载时间 < 2s，页面切换 < 500ms
- **打包大小**：vendor chunk < 500KB，业务chunk < 300KB (gzipped)

## 项目结构规范
```
src/
├── views/                 # Vue 页面组件
│   ├── dashboard/        # 仪表板页面
│   ├── conversation/     # 对话管理页面
│   ├── coaching/         # 教练辅导页面
│   ├── compliance/       # 合规分析页面
│   └── user/            # 用户管理页面
├── components/           # Vue 组件
│   ├── common/          # 通用组件
│   ├── charts/          # 图表组件
│   ├── forms/           # 表单组件
│   └── mgv-ui/          # 自定义UI组件库
├── api/                 # API 接口调用
├── store/               # Vuex 状态管理
├── router/              # Vue Router 路由配置
├── utils/               # 工具函数
├── plugins/             # Vue 插件
├── styles/              # 样式文件
├── assets/              # 静态资源
└── i18n/                # 国际化语言文件
```

## 命名规范
- **文件名**：PascalCase (MyComponent.vue) 或 kebab-case (my-component.vue)
- **组件名**：PascalCase (MyComponent)
- **变量名**：camelCase (myVariable)
- **常量名**：SCREAMING_SNAKE_CASE (API_URL)
- **Vuex模块**：camelCase (userModule)
- **API函数**：camelCase (getUserList)

## 部署规范
- **部署平台**：Nginx + 静态资源服务 / CDN
- **环境变量**：使用 .env 文件管理不同环境配置
- **构建产物**：npm run build 生成 dist 目录
- **监控**：前端错误监控 + 性能监控
- **CDN**：静态资源使用 CDN 加速
- **缓存策略**：合理设置静态资源缓存时间

## 安全规范
- **数据保护**：敏感数据加密传输和存储
- **认证方式**：JWT Token + 本地存储
- **XSS 防护**：输入验证和输出转义
- **CSRF 防护**：请求头验证和Token验证
- **API安全**：请求签名和频率限制
```

## 使用指南

### 创建销售系统项目规范文档
1. 在 `.specsDocs` 目录下创建销售分析系统专用规范文档
2. 使用上述模板创建 `product.md` 和 `tech.md` 文件
3. 根据销售业务的实际需求调整内容
4. 确保符合 Vue.js 和 Element UI 最佳实践
5. 提交到 Git 版本控制系统

### 维护规范文档
1. 定期审查和更新规范文档，跟随Vue.js版本更新
2. 收集团队反馈，持续改进销售分析功能规范
3. 确保规范与实际 JavaScript 代码保持一致
4. 培训团队成员遵循Vue.js开发规范

## 最佳实践

### 1. 销售系统项目规范设计原则
- **数据安全优先**：所有规范都要体现客户数据保护的重要性
- **现代化技术栈**：规范应该体现 Vue.js 2.7 和现代前端开发特性
- **用户体验导向**：规范应该强调销售人员的使用体验
- **可扩展性**：规范应该支持从小型团队到大型企业的各种场景

### 2. 前端团队协作
- **组件化开发**：团队成员对Vue组件设计达成共识，**新建组件必须使用setup语法糖**
- **Hooks优先原则**：能用hooks的场景优先使用hooks，提高代码复用性和可维护性
- **业务组件复用**：定期分享销售业务组件设计最佳实践
- **数据驱动决策**：建立基于销售数据分析的产品决策机制
- **工具链统一**：使用 ESLint、Prettier、Vue DevTools 等工具辅助规范执行

### 3. 规范管理
- **Git 工作流**：规范文档纳入 Pull Request 流程
- **变更通知**：规范变更通过团队会议进行讨论
- **文档同步**：及时更新 API 接口文档和组件文档
- **性能监控**：定期评估页面性能和打包大小
- **用户反馈**：收集销售团队的使用反馈

### 4. Vue.js 项目特定实践
- **Composition API**：优先使用 Vue 2.7 Composition API 特性，**新建组件必须使用setup语法糖**
- **Hooks优先原则**：能用hooks的场景优先使用hooks，如 useLoading、useRequest 等
- **组件设计**：合理设计单文件组件的结构，遵循setup语法糖规范
- **状态管理**：使用 Vuex 进行合理的状态管理，结合Composition API使用
- **国际化支持**：保持多语言支持的一致性
- **Element UI 定制**：合理定制 Element UI 主题和组件，优先使用自定义MgvUI组件
