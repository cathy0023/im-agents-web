# DataEyes可配置聊天布局设计规范 (SDC)

## 🎯 设计概述

本规范定义了DataEyes页面的可配置聊天功能布局和交互设计。该设计基于现有的组件架构，通过重新组装现有组件来实现一个自适应的双模式布局系统。

## 📋 功能需求

### 核心需求
1. **默认模式**: DataEyes默认为纯数据分析展示页面，显示图表和统计数据
2. **聊天模式**: 可配置启用聊天功能，支持用户与数据分析AI交互
3. **动态布局**: 聊天功能激活时，布局自动调整为左右分割模式
4. **无缝切换**: 用户可以通过浮动聊天气泡随时激活/关闭聊天功能

## 🏗️ 组件架构设计

### 现有组件复用策略
```
复用组件:
├── ChartArea       // 数据图表区域 (无需修改)
├── ChatArea        // 聊天对话区域 (无需修改)  
├── MessageInput    // 消息输入组件 (从FooterBar中提取)
└── 布局组件框架     // 基于MessageLayout重构
```

### 新增组件需求
```
新增组件:
├── ChatBubble         // 浮动聊天气泡
├── DataEyesLayout     // DataEyes专用布局容器
└── AdaptiveContainer  // 自适应容器 (管理布局切换)
```

## 🎨 布局形态设计

### 1. 默认模式布局 (纯数据分析)
```
┌─────────────────────────────────────────────────────────┐
│                    Header Bar                           │
├─────────────────────────────────────────────────────────┤
│                                                         │
│                                                         │
│                 ChartArea                               │
│             (全屏数据展示)                                │
│                                                         │
│     ┌──────────┐                                        │
│     │💬 Chat   │                                        │
│     │ Bubble   │                                        │
│     └──────────┘                                        │
└─────────────────────────────────────────────────────────┘
```

### 2. 聊天激活模式布局 (1:1分割)
```
┌─────────────────────────────────────────────────────────┐
│                    Header Bar                           │
├─────────────────────────────────────────────────────────┤
│                             │                           │
│         ChatArea            │        ChartArea          │
│      (聊天对话区域)          │      (图表数据区域)        │
│                             │                           │
│                             │                           │
├─────────────────────────────┤                           │
│      MessageInput           │                           │
│     (消息输入框)             │                           │
└─────────────────────────────┴───────────────────────────┘
```

## 🔄 交互流程设计

### 聊天气泡交互
```mermaid
graph TD
    A[默认状态: 显示聊天气泡] --> B[用户点击聊天气泡]
    B --> C[气泡淡出/隐藏]
    C --> D[ChatArea从左侧推入]
    D --> E[ChartArea移动到右侧]
    E --> F[MessageInput显示在底部]
    F --> G[聊天模式激活]
    
    G --> H[用户可关闭聊天]
    H --> I[ChatArea推出]
    I --> J[ChartArea扩展到全屏]
    J --> K[聊天气泡重新显示]
    K --> A
```

### 布局切换动画
- **进入聊天模式**: 
  - 气泡淡出 (200ms)
  - ChatArea从左侧滑入 (300ms ease-out)
  - ChartArea平滑调整宽度 (300ms ease-out) 
  - MessageInput从底部升起 (250ms ease-out)

- **退出聊天模式**:
  - MessageInput下沉隐藏 (200ms)
  - ChatArea向左侧滑出 (300ms ease-in)
  - ChartArea扩展到全屏 (300ms ease-in)
  - 聊天气泡淡入 (250ms delay)

## 🎛️ 组件接口设计

### DataEyesLayout组件接口
```typescript
interface DataEyesLayoutProps {
  // 是否启用聊天功能
  chatEnabled?: boolean
  
  // 聊天状态控制
  isChatActive?: boolean
  onChatToggle?: (active: boolean) => void
  
  // 数据配置
  chartData?: any
  agentId?: number
  
  // 样式定制
  className?: string
  chatBubblePosition?: 'bottom-left' | 'bottom-right'
}
```

### ChatBubble组件接口  
```typescript
interface ChatBubbleProps {
  // 显示状态
  visible: boolean
  
  // 位置配置
  position?: 'bottom-left' | 'bottom-right'
  offset?: { x: number; y: number }
  
  // 交互回调
  onClick: () => void
  
  // 样式配置
  size?: 'sm' | 'md' | 'lg'
  variant?: 'default' | 'primary' | 'outline'
  
  // 动画配置
  animation?: boolean
  pulse?: boolean
}
```

### AdaptiveContainer组件接口
```typescript
interface AdaptiveContainerProps {
  // 布局模式
  mode: 'chart-only' | 'chat-active'
  
  // 子组件
  chartComponent: React.ReactNode
  chatComponent?: React.ReactNode
  inputComponent?: React.ReactNode
  
  // 动画配置
  transition?: {
    duration: number
    easing: string
  }
  
  // 布局配置
  splitRatio?: number // 默认0.5 (1:1分割)
}
```

## 🎯 状态管理设计

### 聊天状态扩展
```typescript
// 扩展现有chatStore
interface DataEyesChatState {
  // 现有状态保持不变
  ...existing_chat_state
  
  // 新增DataEyes专用状态
  dataEyesConfig: {
    chatEnabled: boolean        // 是否启用聊天
    isChatActive: boolean      // 聊天是否激活
    bubbleVisible: boolean     // 气泡是否可见
    layoutMode: 'chart-only' | 'chat-active'  // 布局模式
  }
  
  // 新增动作
  toggleDataEyesChat: () => void
  setDataEyesChatEnabled: (enabled: boolean) => void
  setDataEyesLayoutMode: (mode: string) => void
}
```

## 🎨 样式规范

### 聊天气泡样式
```typescript
// 基础样式
const chatBubbleStyles = {
  base: "fixed z-50 rounded-full shadow-lg border transition-all duration-200",
  sizes: {
    sm: "w-12 h-12",
    md: "w-16 h-16", 
    lg: "w-20 h-20"
  },
  variants: {
    default: "bg-background text-foreground border-border hover:bg-accent",
    primary: "bg-primary text-primary-foreground border-primary hover:bg-primary/90",
    outline: "bg-background text-muted-foreground border-border hover:bg-accent"
  },
  positions: {
    'bottom-left': "bottom-6 left-6",
    'bottom-right': "bottom-6 right-6"
  }
}
```

### 布局过渡样式
```css
/* 平滑布局过渡 */
.adaptive-container {
  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

.chat-area-enter {
  transform: translateX(-100%);
  opacity: 0;
}

.chat-area-enter-active {
  transform: translateX(0);
  opacity: 1;
  transition: all 300ms ease-out;
}

.chat-area-exit {
  transform: translateX(0);
  opacity: 1;
}

.chat-area-exit-active {
  transform: translateX(-100%);
  opacity: 0;
  transition: all 300ms ease-in;
}
```

## 📱 响应式设计

### 桌面端 (>1024px)
- 聊天气泡位置: 左下角
- 分割比例: 1:1 (ChatArea : ChartArea)
- 动画: 完整过渡动画

### 平板端 (768px - 1024px)  
- 聊天气泡位置: 左下角
- 分割比例: 2:3 (ChatArea : ChartArea)
- 动画: 简化过渡动画

### 移动端 (<768px)
- 聊天气泡位置: 左下角
- 布局模式: 全屏切换 (ChatArea全屏覆盖)
- 动画: 滑动切换

## 🔧 技术实现要点

### 1. 组件重构策略
```typescript
// 从FooterBar中提取MessageInput
// 原有FooterBar保持向后兼容
export const MessageInput = ({ /* props */ }) => {
  // 原有MessageInput逻辑
}

// 创建独立的ChatInputArea组件
export const ChatInputArea = ({ agentId, className }: ChatInputAreaProps) => {
  return (
    <div className={cn("border-t border-border bg-background p-4", className)}>
      <MessageInput placeholder="请输入数据分析问题..." />
    </div>
  )
}
```

### 2. 布局动画实现
```typescript
// 使用framer-motion或CSS transitions
import { AnimatePresence, motion } from 'framer-motion'

const AdaptiveContainer = ({ mode, children }) => {
  return (
    <div className="flex h-full">
      <AnimatePresence>
        {mode === 'chat-active' && (
          <motion.div
            initial={{ x: '-100%', opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: '-100%', opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeOut' }}
            className="flex-1"
          >
            {chatComponent}
          </motion.div>
        )}
      </AnimatePresence>
      
      <motion.div
        animate={{ 
          width: mode === 'chat-active' ? '50%' : '100%' 
        }}
        transition={{ duration: 0.3, ease: 'easeOut' }}
        className="h-full"
      >
        {chartComponent}
      </motion.div>
    </div>
  )
}
```

### 3. 状态持久化
```typescript
// 保存用户的聊天偏好设置
const useDataEyesPreferences = () => {
  const [preferences, setPreferences] = useLocalStorage('dataEyesPreferences', {
    chatEnabled: true,
    bubblePosition: 'bottom-left',
    defaultChatActive: false
  })
  
  return { preferences, setPreferences }
}
```

## ✅ 验收标准

### 功能验收
- [ ] 聊天气泡在默认模式下正确显示
- [ ] 点击气泡能正确激活聊天模式
- [ ] 布局切换动画流畅自然
- [ ] ChatArea和ChartArea在聊天模式下1:1分割
- [ ] MessageInput在聊天模式下正确显示和功能正常
- [ ] 可以正确关闭聊天模式返回默认布局
- [ ] 原有FooterBar功能移除且不影响其他页面

### 性能验收
- [ ] 布局切换动画帧率 >60fps
- [ ] 组件状态切换响应时间 <100ms
- [ ] 内存占用无明显增长
- [ ] 不影响ChartArea的渲染性能

### 兼容性验收
- [ ] 支持所有主流浏览器
- [ ] 响应式布局在不同屏幕尺寸下正确显示
- [ ] 支持触摸设备交互
- [ ] 无障碍访问兼容

## 🚀 实施计划

### 阶段1: 组件提取和重构 (1-2天)
1. 从FooterBar提取MessageInput为独立组件
2. 创建ChatInputArea组件
3. 设计ChatBubble组件
4. 更新现有组件引用

### 阶段2: 布局容器开发 (2-3天) 
1. 开发AdaptiveContainer组件
2. 实现DataEyesLayout组件
3. 集成动画和过渡效果
4. 响应式布局适配

### 阶段3: 状态管理集成 (1天)
1. 扩展chatStore状态
2. 实现状态持久化
3. 集成组件状态管理

### 阶段4: 测试和优化 (1-2天)
1. 功能测试
2. 性能优化
3. 兼容性测试
4. 用户体验优化

## 📚 参考资源

- 现有组件: `src/components/MessageLayout.tsx` (布局参考)
- 现有组件: `src/components/ChartArea.tsx` (图表区域)
- 现有组件: `src/components/ChatArea.tsx` (聊天区域)
- 现有组件: `src/components/FooterBar.tsx` (输入组件参考)
- 状态管理: `src/store/chatStore.ts` (状态扩展参考)
- 样式系统: shadcn UI + Tailwind CSS
- 动画库: framer-motion (推荐) 或 CSS Transitions

---

*本文档基于SDC设计理念创建，提供了完整的设计规范、技术实现和验收标准，为开发团队提供清晰的实施指导。*