---
description: 提到 "sdc" 时
alwaysApply: false
---
# 规范驱动开发 (Spec-Driven Coding) 核心规则

## 概述

SDC（Spec-Driven Coding）是基于**规范驱动开发**理念的 AI 协作框架，旨在将 AI 从"对话式编码"升级为"工程化协作"。通过 Spec（规范）、Hooks（钩子）、Steering（方向盘）三大核心能力，实现从概念到生产的全流程管理。

**SDC完成后，先别写具体代码，除非明确要求实现代码**。

## 核心理念

### 规范驱动开发
- **先规划，再开发**：接收用户功能想法后，先共同分析需求、设计方案、拆分任务，再编码
- **项目记忆**：全程保存决策和规划，形成可追溯的项目"记忆"
- **AI 合伙人**：让 AI 成为项目合伙人，而非单纯的编码工具

### 三大核心能力

#### 1. Spec（规范）
**定义**：明确需求、设计、任务，让 AI 按规范执行

**生成文档**：
- `requirements.md`：用 EARS 格式明确需求
- `design.md`：系统架构、数据库设计、API 接口设计、技术选型
- `tasks.md`：细分任务清单

**工作流程**：
```
想法 → 需求分析 → 技术设计 → 任务分解 → 编码
```

**最佳实践**：
- 模块化管理：按功能拆分 Specs（如 `.user-auth/`、`.comment-system/` 等）
- 从现有需求导入：复制 Word/JIRA 文档，输入指令生成规范
- 迭代更新：修改需求后更新设计，新增任务

#### 2. Hooks（钩子）
**定义**：自动化重复劳动，如保存文件跑单测、更新文档等

**组成**：
- 触发条件：如文件编辑、文件创建等，可通过路径模式限定
- 执行动作：用自然语言描述需执行的操作

**示例**：
- 测试同步 Hook：修改代码文件时自动提醒更新测试用例
- API 文档更新器：API 文件变动时自动更新相关文档

**最佳实践**：
- 从简单开始：先配置基础同步 Hook
- 写清晰提示语：明确具体操作，避免模糊表述
- 团队共享：配置存于 `.sdc/specs/hooks/`，通过 Git 管理

#### 3. Steering（方向盘）
**定义**：用 Markdown 沉淀团队规范，让 AI 按规矩办事

**文档结构**：
- 先在`.sdc/specs`文件夹下建一个任务命名的文件夹
- `product.md`：业务目标、用户画像等
- `tech.md`：技术栈、强制库版本等
- `structure.md`：目录约定、命名规范等

**最佳实践**：
- 聚焦单一领域：每个文件专注一个方面
- 清晰命名：如 `api-rest-conventions.md`
- 包含上下文：解释规则背后的决策理由
- 提供示例：用代码对比说明规范
- 安全优先：避免敏感信息
- 定期维护：架构变动后及时更新

## 适用场景

- 中大型生产项目
- 多人协作开发
- 需要长期维护的项目
- 对代码质量和一致性要求较高的项目

## 工作流程

1. **需求分析阶段**：与用户共同分析需求，明确目标
2. **设计阶段**：制定技术方案，确定实现方式
3. **任务分解**：将工作拆分为具体任务，按步骤完成
4. **编码阶段**：按规范执行编码，保持文档同步
5. **维护阶段**：持续更新规范，保持项目记忆

## 价值总结

SDC 通过 Spec、Hooks、Steering 三大系统，将"上下文工程"落实到开发全流程：
- **前期规划明确**：通过 Spec 确保需求、设计、任务清晰
- **中期协作顺畅**：通过 Hooks 自动化重复劳动
- **后期维护无痛**：通过 Steering 保持团队规范一致性