# DataEyes组件架构设计图

## 🏗️ 组件层次结构

### 当前架构 (MessageLayout.tsx - case 2)
```
MessageLayout (agentType="dataeyes")
└── getContentLayout() case 2:
    └── div.flex-1.flex.flex-col.h-full
        ├── div.flex-1.overflow-hidden
        │   └── ChartArea (全屏显示)
        └── FooterBar
            ├── mode="hr"
            ├── showInput={false}
            └── showActions={false}
```

### 重构后的新架构
```
DataEyesLayout (新建)
└── AdaptiveContainer (新建)
    ├── 默认模式 (mode="chart-only")
    │   ├── ChartArea (全屏)
    │   └── ChatBubble (浮动气泡)
    │
    └── 聊天模式 (mode="chat-active")
        ├── 左侧区域 (flex-1)
        │   ├── ChatArea (聊天对话)
        │   └── ChatInputArea (消息输入)
        └── 右侧区域 (flex-1)
            └── ChartArea (图表数据)
```

## 📐 布局结构对比

### 原始布局 (当前)
```
┌─────────────────────────────────────────────────────┐
│                   HeaderBar                         │
├─────────────────────────────────────────────────────┤
│                                                     │
│                                                     │
│                                                     │
│                   ChartArea                         │
│                  (100% 宽度)                         │
│                                                     │
│                                                     │
├─────────────────────────────────────────────────────┤
│                   FooterBar                         │
│              (showInput=false)                      │
└─────────────────────────────────────────────────────┘
```

### 重构后布局1 - 默认模式
```
┌─────────────────────────────────────────────────────┐
│                   HeaderBar                         │
├─────────────────────────────────────────────────────┤
│                                                     │
│                                                     │
│                   ChartArea                         │
│                  (100% 宽度)                         │
│                                                     │
│ ┌──────────┐                                        │
│ │💬 Chat   │                                        │
│ │ Bubble   │                                        │
│ └──────────┘                                        │
└─────────────────────────────────────────────────────┘
```

### 重构后布局2 - 聊天激活模式
```
┌─────────────────────────────────────────────────────┐
│                   HeaderBar                         │
├─────────────────────────────────────────────────────┤
│                             │                       │
│          ChatArea           │      ChartArea        │
│       (聊天对话区)           │     (图表数据区)       │
│                             │                       │
│                             │                       │
│                             │                       │
├─────────────────────────────┤                       │
│       ChatInputArea         │                       │
│      (消息输入框)            │                       │
└─────────────────────────────┴───────────────────────┘
```

## 🧩 组件复用映射

### 现有组件保持不变
```
✅ ChartArea.tsx
   - 功能: 数据图表展示
   - 修改: 无需修改
   - 位置: 默认模式全屏，聊天模式右侧50%

✅ ChatArea.tsx  
   - 功能: 聊天对话显示
   - 修改: 无需修改
   - 位置: 聊天模式左侧上部分

✅ MessageInput.tsx (从FooterBar提取)
   - 功能: 消息输入处理
   - 修改: 提取为独立组件
   - 位置: 聊天模式左侧下部分
```

### 移除的组件
```
❌ FooterBar (在DataEyes页面中)
   - 原因: 快捷操作功能删除，输入功能迁移
   - 替代: ChatInputArea + ChatBubble
```

### 新建组件
```
🆕 ChatBubble.tsx
   - 功能: 浮动聊天气泡
   - 位置: 默认模式右下角
   - 交互: 点击激活聊天模式

🆕 ChatInputArea.tsx
   - 功能: 聊天输入区域容器
   - 组成: MessageInput + 样式容器
   - 位置: 聊天模式左侧底部

🆕 AdaptiveContainer.tsx
   - 功能: 自适应布局容器
   - 职责: 管理布局模式切换和动画
   - 子组件: ChatArea, ChartArea, ChatInputArea

🆕 DataEyesLayout.tsx
   - 功能: DataEyes页面布局容器
   - 职责: 状态管理和事件处理
   - 替代: MessageLayout中的case 2逻辑
```

## 🔄 组件数据流

### 状态管理流
```
DataEyesLayout
    ↓ (chatConfig状态)
AdaptiveContainer
    ↓ (mode props)
ChatBubble / ChatArea + ChartArea
    ↓ (事件回调)
DataEyesLayout
    ↓ (更新chatStore)
全局状态更新
```

### 事件流
```
用户点击ChatBubble
    ↓
DataEyesLayout.handleChatToggle()
    ↓
chatStore.toggleDataEyesChat()
    ↓ 
AdaptiveContainer mode切换
    ↓
布局动画执行
    ↓
聊天模式激活
```

## 📱 响应式组件结构

### 桌面端 (>1024px)
```
AdaptiveContainer
├── ChatBubble (64x64px, 左下角)
├── 默认模式: ChartArea (100%宽度)
└── 聊天模式: 
    ├── ChatArea (50%宽度)
    ├── ChatInputArea (50%宽度底部)
    └── ChartArea (50%宽度)
```

### 平板端 (768px-1024px)
```
AdaptiveContainer  
├── ChatBubble (56x56px, 左下角)
├── 默认模式: ChartArea (100%宽度)
└── 聊天模式:
    ├── ChatArea (40%宽度)
    ├── ChatInputArea (40%宽度底部)
    └── ChartArea (60%宽度)
```

### 移动端 (<768px)
```
AdaptiveContainer
├── ChatBubble (48x48px, 左下角)
├── 默认模式: ChartArea (100%宽度)
└── 聊天模式: (全屏切换)
    ├── ChatArea (100%宽度覆盖)
    ├── ChatInputArea (100%宽度底部)
    └── [返回按钮] → 返回ChartArea
```

## 🎯 路由集成方案

### 当前路由结构保持不变
```typescript
// App.tsx - 路由不变
<Route path="/messages/:agentType" element={<MessageLayout />} />

// MessageLayout.tsx - 修改case 2
const getContentLayout = () => {
  switch(currentAgent.id) {
    case 2:
      // 原来的DataEyes布局逻辑
      return (
        <div className="flex-1 flex flex-col h-full">
          <div className="flex-1 overflow-hidden">
            <ChartArea />
          </div>
          <FooterBar 
            mode="hr" 
            selectedAgent={currentAgent.id}
            showInput={false}
            showActions={false}
          />
        </div>
      )
      
      // 替换为新的DataEyes布局
      return <DataEyesLayout agentId={currentAgent.id} />
  }
}
```

## 🎨 样式继承方案

### 主题兼容性保证
```typescript
// 所有新组件严格遵循shadcn语义化颜色
const componentStyles = {
  chatBubble: "bg-background text-foreground border-border hover:bg-accent",
  chatInputArea: "bg-background border-t border-border",
  adaptiveContainer: "bg-background text-foreground"
}

// 继承现有组件样式
const existingStyles = {
  chartArea: "h-full bg-muted/30 p-4 border-l border-border", // 保持不变
  chatArea: "h-full bg-background flex flex-col",              // 保持不变
  messageInput: "...",                                         // 提取后保持不变
}
```

## 🔧 实现优先级

### 高优先级组件 (必须先完成)
1. **ChatBubble** - 入口交互组件
2. **ChatInputArea** - 从FooterBar提取MessageInput
3. **AdaptiveContainer** - 核心布局管理器

### 中优先级组件
4. **DataEyesLayout** - 主容器组件
5. **布局切换动画** - 用户体验优化

### 低优先级功能
6. **响应式适配** - 移动端优化
7. **状态持久化** - 用户偏好保存
8. **性能优化** - 动画性能调优

---

*此架构图为开发团队提供了清晰的组件重构方向和实现优先级，确保在不破坏现有功能的前提下，顺利实现DataEyes可配置聊天功能。*