---
description: "项目开发规则总览和使用指南"
---

# Cursor Rules 使用指南

## 📚 规则文件概览

本项目包含以下 Cursor Rules，用于指导基于 **React + TypeScript + Vite + Tailwind CSS + shadcn UI + zustand + axios + react-i18next** 技术栈的开发：

### 🎯 [核心项目规则](mdc:.cursor/rules/core-project.mdc) 
- **适用范围**: 所有文件 (alwaysApply: true)
- **核心内容**: 项目技术栈、目录结构、shadcn UI 优先原则、国际化强制要求
- **关键要点**: **必须优先使用 shadcn UI 组件 + 强制支持国际化**

### 🧩 [组件开发规则](mdc:.cursor/rules/component-development.mdc)
- **适用范围**: `*.tsx` 和 `src/components/**/*.tsx`
- **核心内容**: React 组件开发规范、shadcn UI 使用流程、国际化集成
- **关键要点**: 组件开发流程、性能优化、导入顺序、国际化支持

### 📝 [TypeScript 标准](mdc:.cursor/rules/typescript-standards.mdc)
- **适用范围**: `*.ts` 和 `*.tsx`
- **核心内容**: 类型安全、接口定义、工具类型使用
- **关键要点**: 严格类型检查、禁止使用 `any`

### 🎨 [样式开发指南](mdc:.cursor/rules/styling-guidelines.mdc)
- **适用范围**: `*.tsx` 和 `*.css` 文件
- **核心内容**: Tailwind CSS 规范、响应式设计、设计系统、RTL 布局支持
- **关键要点**: 仅使用 Tailwind CSS、shadcn 样式集成、国际化布局适配

### 🌐 [API 开发规范](mdc:.cursor/rules/api-development.mdc)
- **适用范围**: `src/lib/api.ts`、`src/lib/sse.ts` 等 API 文件
- **核心内容**: HTTP 客户端、错误处理、SSE 连接、性能优化、国际化 API 支持
- **关键要点**: 统一 API 管理、类型安全的接口调用、多语言响应支持

### 🌍 [国际化开发规则](mdc:.cursor/rules/internationalization.mdc)
- **适用范围**: `*.tsx`、`src/components/**/*.tsx`、`src/i18n/**/*`
- **核心内容**: 国际化开发规范、翻译管理、RTL 布局支持
- **关键要点**: 强制支持三种语言、禁止硬编码文本、RTL 布局适配

## 🎯 使用 Cursor Rules

### 自动应用的规则
- **核心项目规则** 会在每次 AI 对话中自动应用
- 提供项目整体架构和技术栈指导

### 基于文件类型的规则
- 当编辑 `.tsx` 文件时，组件开发规则和国际化规则自动生效
- 当编辑 `.ts/.tsx` 文件时，TypeScript 标准自动生效
- 当处理样式相关文件时，样式指南自动生效
- 当编辑 API 相关文件时，API 规范自动生效
- 当编辑 `src/i18n/**/*` 文件时，国际化规则自动生效

### 手动引用规则
可以通过 `/rules` 命令或直接引用特定规则：
```
请参考组件开发规则帮我创建一个新组件
请按照 TypeScript 标准检查这段代码
```

## 🎨 **CRITICAL: shadcn UI + 国际化双重优先级**

**这是项目最重要的规则！** 在任何 UI 开发中：

### shadcn UI 优先级
1. **第一选择**: 检查是否有现有的 shadcn UI 组件

2. **第二选择**: 使用 **MCP shadcn 方式**（推荐）搜索和添加组件
   - AI 自动搜索相关组件
   - 获取完整的使用示例和最佳实践  
   - 自动生成正确的安装命令
   
   **示例工作流**:
   ```typescript
   // 🔍 AI 搜索: mcp_shadcn_search_items_in_registries
   // 📋 查看详情: mcp_shadcn_view_items_in_registries  
   // 💡 获取示例: mcp_shadcn_get_item_examples_from_registries
   // ⚡ 安装命令: mcp_shadcn_get_add_command_for_items
   ```

3. **第三选择**: 直接使用 npx 命令添加组件
   ```bash
   npx shadcn@latest add [component-name]
   ```

4. **第四选择**: 组合现有 shadcn 组件创建复杂 UI

5. **最后选择**: 仅在无法满足需求时创建完全自定义组件

### 国际化强制要求
**所有组件必须同时支持国际化！**

```typescript
// ✅ 强制要求：shadcn UI + 国际化
import { useI18n } from '@/hooks/useI18n'
import { Button } from '@/components/ui/button'

const MyComponent = () => {
  const { t, isRTL, textDirection } = useI18n('ui')
  
  return (
    <div dir={textDirection}>
      <Button className={isRTL ? 'rtl-style' : 'ltr-style'}>
        {t('action_button')}
      </Button>
    </div>
  )
}
```

## 📋 开发工作流

### 开始新功能开发
1. 查看 [核心项目规则](mdc:.cursor/rules/core-project.mdc) 了解项目架构
2. 参考 [组件开发规则](mdc:.cursor/rules/component-development.mdc) 规划组件结构
3. 遵循 [TypeScript 标准](mdc:.cursor/rules/typescript-standards.mdc) 定义类型
4. 按照 [样式指南](mdc:.cursor/rules/styling-guidelines.mdc) 实现 UI
5. **必须遵循 [国际化开发规则](mdc:.cursor/rules/internationalization.mdc) 支持多语言**

### API 集成开发
1. 参考 [API 开发规范](mdc:.cursor/rules/api-development.mdc)
2. 在 [src/lib/api.ts](mdc:src/lib/api.ts) 中添加新接口
3. 定义对应的 TypeScript 类型
4. 实现错误处理和重试逻辑

### 代码审查要点
- ✅ 是否优先使用了 shadcn UI 组件？
- ✅ 是否遵循了 TypeScript 类型安全？
- ✅ 是否使用了正确的 Tailwind CSS 样式？
- ✅ 是否实现了统一的错误处理？
- ✅ 是否考虑了响应式设计？
- ✅ **是否支持国际化（三种语言）？**
- ✅ **是否考虑了 RTL 布局？**
- ✅ **是否避免了硬编码文本？**

## 🔧 规则维护

### 更新规则
当项目需求变化时，可以更新相应的规则文件：
- 技术栈变更 → 更新核心项目规则
- 新的组件模式 → 更新组件开发规则
- 样式规范调整 → 更新样式指南

### 添加新规则
为特定功能或模块创建新的规则文件：
```markdown
---
globs: src/features/特定功能/**/*
---
# 特定功能开发规则
```

## 🎯 最佳实践提醒

1. **shadcn UI 优先**: 这是项目的核心要求，不可妥协
2. **国际化强制**: 所有新功能必须支持三种语言，不可妥协
3. **类型安全**: 严格遵循 TypeScript 规范，避免 `any`
4. **统一样式**: 仅使用 Tailwind CSS，配合 shadcn 设计系统
5. **集中管理**: API、状态、类型都要集中管理
6. **响应式设计**: 移动端优先的设计理念
7. **RTL 支持**: 必须考虑阿拉伯文的 RTL 布局

通过遵循这些规则，确保项目代码的一致性、可维护性、国际化支持和高质量！